<?xml version="1.0"?>
<launch>
<!-- Launch Node Manager -->
<!--     <env name="ROSCONSOLE_CONFIG_FILE" value="$(find iop_cfg_sim_stage_fkie)/launch/rosconsole.config"/> -->
    <node name="jaus_node_manager" pkg="node_manager_fkie" type="script_runner.py">
        <param name="script" value="$(find jaustoolset)/JTSNodeManager $(find jaustoolset)/cfg/nm.cfg" />
        <!-- <param name="stop_script" value="pkg://iop_builder_fkie///jaus_node_manager.sh stop" /> -->
    </node>

    <node pkg="turtlesim" type="turtle_teleop_key" name="teleop_key" required="true" launch-prefix="xterm -e">
      <!-- added this remap to be able to test the configuration on the same computer -->
      <remap from="/turtle1/cmd_vel" to="/cmd_vel"/>
    </node>

    <node	pkg="turtlesim" type="turtlesim_node" name="turtle1" respawn="true"/>

    <!-- JAUS configuration used by IOP bridge components
     EnableLoopback  = "2"
     enables you to catch the UDP messages by wireshark.
    -->
    <param name="jaus_config" value="$(find jaustoolset)/cfg/nm.cfg"/>

    <!--
    Start the rqt and "FKIE IOP/Access Control" plugin 
    You need get the control. Without control no commands are published to the ROS topics by primitive driver.
    Only the /iop_ocu_client can control the turtle.
    -->
    <node name="rqt_ocu" pkg="rqt_gui" type="rqt_gui" args="--force-discover --perspective-file $(find iop_handoff_fkie)/launch/rqt_example.perspective"/>

    <!-- This is the IOP bridge for the robot -->
    <param name="name_subsystem" value="Bob"/>
    <node name="iop_platform_manager" pkg="iop_component_fkie" type="iop_component">
        <param name="name_node" value="platform manager"/>
        <param name="iop_address" value="1.1.15"/>
        <rosparam param="services">
            [
            iop_transport_fkie: "Transport",
            iop_events_fkie: "Events",
            iop_events_fkie: "EventsClient",
            iop_accesscontrol_fkie: "AccessControl",
            iop_discovery_fkie: "Discovery",
            iop_discovery_fkie: "DiscoveryClient",
            iop_liveness_fkie: "Liveness",
            iop_digital_resource_discovery_fkie: "DigitalResourceDiscovery",
            iop_health_monitor_fkie: "HealthMonitor",
            # add PrimitiveDriver to control the turtle
            iop_management_fkie: "Management",
            iop_primitive_driver_fkie: "PrimitiveDriver",
            # Handoff for robot components
            iop_handoff_fkie: "EnhancedAccessControl",
            ]
        </rosparam>
        <rosparam subst_value="true">
            Discovery:
                # 2: Subsystem Identification, 3: Node Identification, 4: Component Identification
                system_id: 2
                # 10001: VEHICLE, 20001: OCU, 30001: OTHER_SUBSYSTEM, 40001: NODE, 50001: PAYLOAD, 60001: COMPONENT
                system_type: 10001
            # added 
            PrimitiveDriver:
                max_linear_x: 3.0
                max_angular_z: -1.5
                # do not use the stamped twist messages
                use_stamped: false
        </rosparam>
        <!-- added remap to publish to the right topic -->
        <remap from="cmd_vel" to="/turtle1/cmd_vel"/>
    </node>

    <!-- This is the IOP bridge client for OCU and can control the turtle -->
    <node name="iop_ocu_client" pkg="iop_component_fkie" type="iop_component">
        <param name="iop_address" value="150.64.200"/>
        <param name="name_node" value="control_client"/>
        <rosparam param="services">
          [
            iop_transport_fkie: "Transport",
            iop_events_fkie: "EventsClient",
            iop_discovery_fkie: "DiscoveryClient",
            # added client for primitive driver and also his subservices
            iop_accesscontrol_fkie: "AccessControlClient",
            iop_management_fkie: "ManagementClient",
            iop_client_primitive_driver_fkie: "PrimitiveDriverClient",
            # Handoff for OCU components
            iop_handoff_fkie: "HandoffController",
          ]
        </rosparam>
        <rosparam subst_value="true">
            EventsClient:
                use_queries: false
            DiscoveryClient:
                register_own_services: false
                enable_ros_interface: true
            HandoffController:
                auto_request: true
                auto_authority: 205
            # configuration for primitive client
            # see https://github.com/fkie/iop_jaus_mobility_clients#iop_client_primitive_driver_fkie-primitivedriverclient
            PrimitiveDriverClient:
                # do not use the stamped twist messages
                use_stamped: false
                # new parameter added to handle velocities greater than 1.0
                # you should update the https://github.com/fkie/iop_jaus_mobility_clients repository
                max_linear: 2
                max_angular: 2
        </rosparam>
        <!-- added remap to catch commands from the right topic -->
        <remap from="joy_cmd_vel" to="cmd_vel"/>
    </node>

    <!-- This is the IOP bridge second client for OCU. This client cannot control the turtle because the /turtle_teleop_key is not connected to him.
    This client is only to demonstrate the Handoff. If this client get the access control the over the turtle you need to process a handoff to
    first client. This can be controlled by rqt plugin. -->
    <group ns="ocu">
    <node name="iop_ocu_client2" pkg="iop_component_fkie" type="iop_component">
        <param name="iop_address" value="150.65.200"/>
        <param name="name_node" value="control_client2"/>
        <rosparam param="services">
          [
            iop_transport_fkie: "Transport",
            iop_events_fkie: "EventsClient",
            iop_discovery_fkie: "DiscoveryClient",
            # added client for primitive driver and also his subservices
            iop_accesscontrol_fkie: "AccessControlClient",
            iop_management_fkie: "ManagementClient",
            iop_client_primitive_driver_fkie: "PrimitiveDriverClient",
            # Handoff for OCU components
            iop_handoff_fkie: "HandoffController",
          ]
        </rosparam>
        <rosparam subst_value="true">
            EventsClient:
                use_queries: false
            DiscoveryClient:
                register_own_services: false
                enable_ros_interface: true
            # configuration for primitive client
            # see https://github.com/fkie/iop_jaus_mobility_clients#iop_client_primitive_driver_fkie-primitivedriverclient
            PrimitiveDriverClient:
                # do not use the stamped twist messages
                use_stamped: false
                # new parameter added to handle velocities greater than 1.0
                # you should update the https://github.com/fkie/iop_jaus_mobility_clients repository
                max_linear: 2
                max_angular: 2
        </rosparam>
        <!-- added remap to catch commands from the right topic -->
        <remap from="joy_cmd_vel" to="cmd_vel"/>
        <remap from="/iop_system" to="/ocu/iop_system"/>
        <remap from="/iop_identification" to="/ocu/iop_identification"/>
        <remap from="/ocu_feedback" to="/ocu/ocu_feedback"/>
        <remap from="/ocu_cmd" to="/ocu/ocu_cmd"/>
    </node>
    </group>

</launch>
